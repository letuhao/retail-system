services:
  productdb:
    image: mongo
    networks:
      - backend-network

  shopdb:
    image: postgres
    networks:
      - backend-network
    ports:
       - "11000:5432"
    environment:
      - PGUSER=postgres
      - PGHOST=postgres
      - PGDATABASE=ShopDB
      - POSTGRES_PASSWORD=123456
      - PGPORT=5432

  userdb:
    image: postgres
    networks:
      - backend-network
    ports:
       - "11010:5433"
    environment:
      - PGUSER=postgres
      - PGHOST=postgres
      - PGDATABASE=UserDB
      - POSTGRES_PASSWORD=123456
      - PGPORT=5433

  distributedcache:
    image: redis
    networks:
      - backend-network
    ports:
       - "11020:6379"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379

  rs.yarpapigateway:
    image: ${DOCKER_REGISTRY-}rsyarpapigateway
    build:
      context: .
      dockerfile: RS.YarpApiGateway/Dockerfile
    networks:
      - backend-network

  rs.userservice:
    image: ${DOCKER_REGISTRY-}rsuserservice
    build:
      context: .
      dockerfile: RS.UserService/Dockerfile
    networks:
      - backend-network
    ports:
       - "10010:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development

  rs.productservice:
    image: ${DOCKER_REGISTRY-}rsproductservice
    build:
      context: .
      dockerfile: RS.ProductService/Dockerfile
    networks:
      - backend-network
    ports:
       - "10020:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development

  rs.shopservice:
    image: ${DOCKER_REGISTRY-}rsshopservice
    build:
      context: .
      dockerfile: RS.ShopService/Dockerfile
    networks:
      - backend-network
    ports:
       - "10030:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development

networks:
  backend-network:
    driver: bridge
